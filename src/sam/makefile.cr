module Sam
  # :nodoc:
  class Makefile
    getter executable_path : String

    def initialize(@executable_path)
    end

    def generate
      File.write(default_makefile_path, makefile_template) unless File.exists?(default_makefile_path)

      ignore = false
      shortcut = false
      content = String.build do |io|
        File.read_lines(default_makefile_path).each do |line|
          if line.starts_with?(delimiter)
            shortcut = true
            ignore = !ignore
            next
          end
          io << line << "\n" unless ignore
        end
        io << makefile_template
      end
      File.write(default_makefile_path, content)
    end

    private def default_makefile_path
      "Makefile"
    end

    private def delimiter
      "# === Sam shortcut"
    end

    private def makefile_template
      <<-MAKEFILE
      #{delimiter}
      # The following lines are autogenerated and any changes will be
      # discarded if Sam regenerates this file.
      CRYSTAL_BIN = crystal
      CRYSTAL_PATH := $(if \
        $(shell command -v $(CRYSTAL_BIN) 2>/dev/null),\
          $(shell command -v $(CRYSTAL_BIN) 2>/dev/null),\
        $(error '`$(CRYSTAL_BIN)` not found, please install it and/or ensure \
        it is in your PATH'))
      SAM_PATH ?= "#{executable_path}"
      .PHONY: sam
      sam:
      \t$(CRYSTAL_PATH) $(SAM_PATH) $(filter-out $@,$(MAKECMDGOALS))
      %:
      \t@:
      #{delimiter}\n
      MAKEFILE
    end
  end
end
